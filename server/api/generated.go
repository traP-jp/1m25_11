// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	TraQOAuth2Scopes = "traQOAuth2.Scopes"
)

// Defines values for GetStampsSearchParamsStampTypeUnicode.
const (
	GetStampsSearchParamsStampTypeUnicodeAll            GetStampsSearchParamsStampTypeUnicode = "all"
	GetStampsSearchParamsStampTypeUnicodeOnlyNotUnicode GetStampsSearchParamsStampTypeUnicode = "only_not_unicode"
	GetStampsSearchParamsStampTypeUnicodeOnlyUnicode    GetStampsSearchParamsStampTypeUnicode = "only_unicode"
)

// Defines values for GetStampsSearchParamsStampTypeAnimation.
const (
	GetStampsSearchParamsStampTypeAnimationAll             GetStampsSearchParamsStampTypeAnimation = "all"
	GetStampsSearchParamsStampTypeAnimationOnlyAnimated    GetStampsSearchParamsStampTypeAnimation = "only_animated"
	GetStampsSearchParamsStampTypeAnimationOnlyNotAnimated GetStampsSearchParamsStampTypeAnimation = "only_not_animated"
)

// Defines values for GetStampsSearchParamsSortby.
const (
	CountMonthlyAsc  GetStampsSearchParamsSortby = "count_monthly_asc"
	CountMonthlyDesc GetStampsSearchParamsSortby = "count_monthly_desc"
	CountTotalAsc    GetStampsSearchParamsSortby = "count_total_asc"
	CountTotalDesc   GetStampsSearchParamsSortby = "count_total_desc"
	CreatedAtAsc     GetStampsSearchParamsSortby = "created_at_asc"
	CreatedAtDesc    GetStampsSearchParamsSortby = "created_at_desc"
	Relativity       GetStampsSearchParamsSortby = "relativity"
)

// Defines values for GetTagsTagIdStampsParamsSort.
const (
	CountMonthly GetTagsTagIdStampsParamsSort = "count_monthly"
	CountTotal   GetTagsTagIdStampsParamsSort = "count_total"
	CreatedAt    GetTagsTagIdStampsParamsSort = "created_at"
	Name         GetTagsTagIdStampsParamsSort = "name"
)

// Defines values for GetTagsTagIdStampsParamsOrder.
const (
	Asc  GetTagsTagIdStampsParamsOrder = "asc"
	Desc GetTagsTagIdStampsParamsOrder = "desc"
)

// Error defines model for Error.
type Error struct {
	// Code エラーコード（例：INVALID_REQUEST, NOT_FOUND, UNAUTHORIZED）
	Code *string `json:"code,omitempty"`

	// Details エラーの詳細情報（任意）
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// RankingResult defines model for RankingResult.
type RankingResult struct {
	// Count 指定期間での使用回数
	Count int   `json:"count"`
	Stamp Stamp `json:"stamp"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	// Stamps 検索結果のスタンプ一覧
	Stamps []Stamp `json:"stamps"`
}

// Stamp defines model for Stamp.
type Stamp struct {
	// CountMonthly 直近30日間の使用回数
	CountMonthly int32 `json:"count_monthly"`

	// CountTotal 全期間での使用回数
	CountTotal int64 `json:"count_total"`

	// CreatedAt スタンプ作成日時 (ISO 8601)
	CreatedAt time.Time `json:"created_at"`

	// CreatorId 作成者のtraQ ID
	CreatorId openapi_types.UUID `json:"creator_id"`

	// CurrentDescriptionId 現在の説明文のUUID
	CurrentDescriptionId *openapi_types.UUID `json:"current_description_id"`
	Descriptions         []StampDescription  `json:"descriptions"`

	// FileId 画像ファイルのUUID
	FileId openapi_types.UUID `json:"file_id"`

	// Id スタンプのUUID
	Id openapi_types.UUID `json:"id"`

	// IsAnimated アニメーションスタンプか否か
	IsAnimated bool `json:"is_animated"`

	// IsUnicode Unicode絵文字か否か
	IsUnicode bool `json:"is_unicode"`

	// Name スタンプ名
	Name string       `json:"name"`
	Tags []TagSummary `json:"tags"`

	// UpdatedAt スタンプ更新日時 (ISO 8601)
	UpdatedAt time.Time `json:"updated_at"`
}

// StampDescription defines model for StampDescription.
type StampDescription struct {
	// CreatorId 説明文の作成者のtraQ ID
	CreatorId openapi_types.UUID `json:"creator_id"`

	// Description スタンプの説明文
	Description string `json:"description"`

	// Id 説明文のUUID
	Id openapi_types.UUID `json:"id"`
}

// StampSummary defines model for StampSummary.
type StampSummary struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// Tag defines model for Tag.
type Tag struct {
	// Count このタグが付けられているスタンプの数
	Count int `json:"count"`

	// CreatedAt タグ作成日時 (ISO 8601)
	CreatedAt time.Time `json:"created_at"`

	// CreatorId タグ作成者のtraQ ID
	CreatorId openapi_types.UUID `json:"creator_id"`

	// Id タグのUUID
	Id openapi_types.UUID `json:"id"`

	// Name タグ名
	Name string `json:"name"`

	// Stamps このタグが付けられているスタンプの一覧
	Stamps []StampSummary `json:"stamps"`

	// UpdatedAt タグ更新日時 (ISO 8601)
	UpdatedAt time.Time `json:"updated_at"`
}

// TagSummary defines model for TagSummary.
type TagSummary struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	CreatedTags        []TagSummary `json:"created_tags"`
	EditedDescriptions []struct {
		// Description ユーザーが投稿した説明文
		Description *string `json:"description,omitempty"`
		Stamp       *Stamp  `json:"stamp,omitempty"`
	} `json:"edited_descriptions"`

	// Id ユーザーのtraP ID
	Id openapi_types.UUID `json:"id"`

	// IsAdmin 管理者権限の有無
	IsAdmin bool `json:"is_admin"`

	// Name ユーザー名
	Name         string  `json:"name"`
	OwnedStamps  []Stamp `json:"owned_stamps"`
	TaggedStamps []struct {
		Stamp *Stamp      `json:"stamp,omitempty"`
		Tag   *TagSummary `json:"tag,omitempty"`
	} `json:"tagged_stamps"`
}

// GetCallBackParams defines parameters for GetCallBack.
type GetCallBackParams struct {
	// Code traQから返される認証コード
	Code string `form:"code" json:"code"`

	// State CSRF攻撃を防ぐためのstate パラメータ
	State string `form:"state" json:"state"`
}

// GetStampsRankingParams defines parameters for GetStampsRanking.
type GetStampsRankingParams struct {
	// Since 開始日 (YYYY-MM-DD)、未指定時は過去1ヶ月
	Since *openapi_types.Date `form:"since,omitempty" json:"since,omitempty"`

	// Until 終了日 (YYYY-MM-DD)、未指定時は今日
	Until *openapi_types.Date `form:"until,omitempty" json:"until,omitempty"`

	// Offset ページネーションのオフセット
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit 1ページあたりの取得件数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetStampsSearchParams defines parameters for GetStampsSearch.
type GetStampsSearchParams struct {
	// Q name, tag, descriptionのいずれかに含まれるキーワード（空白区切りで複数指定可能、いずれかを含んでいれば表示）
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Name スタンプ名に含まれるキーワード（空白区切りで複数指定可能、いずれかを含んでいれば表示）
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Tag タグ名のいずれかを含むかで検索
	Tag *[]string `form:"tag,omitempty" json:"tag,omitempty"`

	// Description 説明文に含まれるキーワード（空白区切りで複数指定可能、いずれかを含んでいれば表示）
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Creator 作成者名に含まれるキーワード（空白区切りで複数指定可能、いずれかを含んでいれば表示）
	Creator *string `form:"creator,omitempty" json:"creator,omitempty"`

	// CreatedSince スタンプ作成日時の開始日 (YYYY-MM-DD)
	CreatedSince *openapi_types.Date `form:"created_since,omitempty" json:"created_since,omitempty"`

	// CreatedUntil スタンプ作成日時の終了日 (YYYY-MM-DD)
	CreatedUntil *openapi_types.Date `form:"created_until,omitempty" json:"created_until,omitempty"`

	// UpdatedSince スタンプ更新日時の開始日 (YYYY-MM-DD)
	UpdatedSince *openapi_types.Date `form:"updated_since,omitempty" json:"updated_since,omitempty"`

	// UpdatedUntil スタンプ更新日時の終了日 (YYYY-MM-DD)
	UpdatedUntil *openapi_types.Date `form:"updated_until,omitempty" json:"updated_until,omitempty"`

	// StampTypeUnicode Unicode絵文字の種類フィルタ
	StampTypeUnicode *GetStampsSearchParamsStampTypeUnicode `form:"stamp_type_unicode,omitempty" json:"stamp_type_unicode,omitempty"`

	// StampTypeAnimation アニメーションスタンプの種類フィルタ
	StampTypeAnimation *GetStampsSearchParamsStampTypeAnimation `form:"stamp_type_animation,omitempty" json:"stamp_type_animation,omitempty"`

	// CountMonthlyMin 月間使用回数の最小値
	CountMonthlyMin *int `form:"count_monthly_min,omitempty" json:"count_monthly_min,omitempty"`

	// CountMonthlyMax 月間使用回数の最大値
	CountMonthlyMax *int `form:"count_monthly_max,omitempty" json:"count_monthly_max,omitempty"`

	// Fuzzy あいまい検索を有効にするか（将来実装予定）
	Fuzzy *bool `form:"fuzzy,omitempty" json:"fuzzy,omitempty"`

	// Sortby ソート順
	Sortby *GetStampsSearchParamsSortby `form:"sortby,omitempty" json:"sortby,omitempty"`
}

// GetStampsSearchParamsStampTypeUnicode defines parameters for GetStampsSearch.
type GetStampsSearchParamsStampTypeUnicode string

// GetStampsSearchParamsStampTypeAnimation defines parameters for GetStampsSearch.
type GetStampsSearchParamsStampTypeAnimation string

// GetStampsSearchParamsSortby defines parameters for GetStampsSearch.
type GetStampsSearchParamsSortby string

// PostStampsStampIdDescriptionsJSONBody defines parameters for PostStampsStampIdDescriptions.
type PostStampsStampIdDescriptionsJSONBody struct {
	// Description 投稿する説明文
	Description string `json:"description"`
}

// PutStampsStampIdDescriptionsJSONBody defines parameters for PutStampsStampIdDescriptions.
type PutStampsStampIdDescriptionsJSONBody struct {
	// Description 更新後の説明文
	Description string `json:"description"`
}

// PostStampsStampIdTagsJSONBody defines parameters for PostStampsStampIdTags.
type PostStampsStampIdTagsJSONBody struct {
	TagId openapi_types.UUID `json:"tag_id"`
}

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody struct {
	Name string `json:"name"`
}

// PutTagsTagIdJSONBody defines parameters for PutTagsTagId.
type PutTagsTagIdJSONBody struct {
	Name string `json:"name"`
}

// GetTagsTagIdStampsParams defines parameters for GetTagsTagIdStamps.
type GetTagsTagIdStampsParams struct {
	// Sort ソートキー
	Sort *GetTagsTagIdStampsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order ソート順
	Order *GetTagsTagIdStampsParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// GetTagsTagIdStampsParamsSort defines parameters for GetTagsTagIdStamps.
type GetTagsTagIdStampsParamsSort string

// GetTagsTagIdStampsParamsOrder defines parameters for GetTagsTagIdStamps.
type GetTagsTagIdStampsParamsOrder string

// PostStampsStampIdDescriptionsJSONRequestBody defines body for PostStampsStampIdDescriptions for application/json ContentType.
type PostStampsStampIdDescriptionsJSONRequestBody PostStampsStampIdDescriptionsJSONBody

// PutStampsStampIdDescriptionsJSONRequestBody defines body for PutStampsStampIdDescriptions for application/json ContentType.
type PutStampsStampIdDescriptionsJSONRequestBody PutStampsStampIdDescriptionsJSONBody

// PostStampsStampIdTagsJSONRequestBody defines body for PostStampsStampIdTags for application/json ContentType.
type PostStampsStampIdTagsJSONRequestBody PostStampsStampIdTagsJSONBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PutTagsTagIdJSONRequestBody defines body for PutTagsTagId for application/json ContentType.
type PutTagsTagIdJSONRequestBody PutTagsTagIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuth2.0コールバック処理
	// (GET /callBack)
	GetCallBack(ctx echo.Context, params GetCallBackParams) error
	// traQ OAuth2.0ログイン開始
	// (GET /login)
	GetLogin(ctx echo.Context) error
	// ログインユーザーのプロファイル情報取得
	// (GET /me)
	GetMe(ctx echo.Context) error
	// 全スタンプ一覧取得
	// (GET /stamps)
	GetStamps(ctx echo.Context) error
	// スタンプ使用回数ランキング
	// (GET /stamps/ranking)
	GetStampsRanking(ctx echo.Context, params GetStampsRankingParams) error
	// スタンプ検索
	// (GET /stamps/search)
	GetStampsSearch(ctx echo.Context, params GetStampsSearchParams) error
	// スタンプ詳細情報取得
	// (GET /stamps/{stampId})
	GetStampsStampId(ctx echo.Context, stampId openapi_types.UUID) error
	// スタンプの説明文を削除
	// (DELETE /stamps/{stampId}/descriptions)
	DeleteStampsStampIdDescriptions(ctx echo.Context, stampId openapi_types.UUID) error
	// スタンプの説明文一覧を取得
	// (GET /stamps/{stampId}/descriptions)
	GetStampsStampIdDescriptions(ctx echo.Context, stampId openapi_types.UUID) error
	// スタンプに説明文を追加
	// (POST /stamps/{stampId}/descriptions)
	PostStampsStampIdDescriptions(ctx echo.Context, stampId openapi_types.UUID) error
	// スタンプの説明文を更新
	// (PUT /stamps/{stampId}/descriptions)
	PutStampsStampIdDescriptions(ctx echo.Context, stampId openapi_types.UUID) error
	// スタンプへのタグ付け
	// (POST /stamps/{stampId}/tags)
	PostStampsStampIdTags(ctx echo.Context, stampId openapi_types.UUID) error
	// スタンプのタグ付け解除
	// (DELETE /stamps/{stampId}/tags/{tagId})
	DeleteStampsStampIdTagsTagId(ctx echo.Context, stampId openapi_types.UUID, tagId openapi_types.UUID) error
	// 全タグ一覧取得
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// 新しいタグを作成
	// (POST /tags)
	PostTags(ctx echo.Context) error
	// タグを削除 (管理者のみ)
	// (DELETE /tags/{tagId})
	DeleteTagsTagId(ctx echo.Context, tagId openapi_types.UUID) error
	// タグの詳細情報を取得
	// (GET /tags/{tagId})
	GetTagsTagId(ctx echo.Context, tagId openapi_types.UUID) error
	// タグ名を編集
	// (PUT /tags/{tagId})
	PutTagsTagId(ctx echo.Context, tagId openapi_types.UUID) error
	// 特定のタグに紐づけられたスタンプ一覧を取得
	// (GET /tags/{tagId}/stamps)
	GetTagsTagIdStamps(ctx echo.Context, tagId openapi_types.UUID, params GetTagsTagIdStampsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCallBack converts echo context to params.
func (w *ServerInterfaceWrapper) GetCallBack(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCallBackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCallBack(ctx, params)
	return err
}

// GetLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogin(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLogin(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// GetStamps converts echo context to params.
func (w *ServerInterfaceWrapper) GetStamps(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStamps(ctx)
	return err
}

// GetStampsRanking converts echo context to params.
func (w *ServerInterfaceWrapper) GetStampsRanking(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStampsRankingParams
	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", ctx.QueryParams(), &params.Until)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStampsRanking(ctx, params)
	return err
}

// GetStampsSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetStampsSearch(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStampsSearchParams
	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", ctx.QueryParams(), &params.Description)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter description: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "created_since" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_since", ctx.QueryParams(), &params.CreatedSince)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_since: %s", err))
	}

	// ------------- Optional query parameter "created_until" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_until", ctx.QueryParams(), &params.CreatedUntil)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_until: %s", err))
	}

	// ------------- Optional query parameter "updated_since" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_since", ctx.QueryParams(), &params.UpdatedSince)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_since: %s", err))
	}

	// ------------- Optional query parameter "updated_until" -------------

	err = runtime.BindQueryParameter("form", true, false, "updated_until", ctx.QueryParams(), &params.UpdatedUntil)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter updated_until: %s", err))
	}

	// ------------- Optional query parameter "stamp_type_unicode" -------------

	err = runtime.BindQueryParameter("form", true, false, "stamp_type_unicode", ctx.QueryParams(), &params.StampTypeUnicode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stamp_type_unicode: %s", err))
	}

	// ------------- Optional query parameter "stamp_type_animation" -------------

	err = runtime.BindQueryParameter("form", true, false, "stamp_type_animation", ctx.QueryParams(), &params.StampTypeAnimation)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stamp_type_animation: %s", err))
	}

	// ------------- Optional query parameter "count_monthly_min" -------------

	err = runtime.BindQueryParameter("form", true, false, "count_monthly_min", ctx.QueryParams(), &params.CountMonthlyMin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count_monthly_min: %s", err))
	}

	// ------------- Optional query parameter "count_monthly_max" -------------

	err = runtime.BindQueryParameter("form", true, false, "count_monthly_max", ctx.QueryParams(), &params.CountMonthlyMax)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter count_monthly_max: %s", err))
	}

	// ------------- Optional query parameter "fuzzy" -------------

	err = runtime.BindQueryParameter("form", true, false, "fuzzy", ctx.QueryParams(), &params.Fuzzy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fuzzy: %s", err))
	}

	// ------------- Optional query parameter "sortby" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortby", ctx.QueryParams(), &params.Sortby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortby: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStampsSearch(ctx, params)
	return err
}

// GetStampsStampId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStampsStampId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStampsStampId(ctx, stampId)
	return err
}

// DeleteStampsStampIdDescriptions converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStampsStampIdDescriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStampsStampIdDescriptions(ctx, stampId)
	return err
}

// GetStampsStampIdDescriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetStampsStampIdDescriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStampsStampIdDescriptions(ctx, stampId)
	return err
}

// PostStampsStampIdDescriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PostStampsStampIdDescriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStampsStampIdDescriptions(ctx, stampId)
	return err
}

// PutStampsStampIdDescriptions converts echo context to params.
func (w *ServerInterfaceWrapper) PutStampsStampIdDescriptions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutStampsStampIdDescriptions(ctx, stampId)
	return err
}

// PostStampsStampIdTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostStampsStampIdTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStampsStampIdTags(ctx, stampId)
	return err
}

// DeleteStampsStampIdTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStampsStampIdTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stampId" -------------
	var stampId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "stampId", ctx.Param("stampId"), &stampId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stampId: %s", err))
	}

	// ------------- Path parameter "tagId" -------------
	var tagId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStampsStampIdTagsTagId(ctx, stampId, tagId)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// DeleteTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagsTagId(ctx, tagId)
	return err
}

// GetTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagsTagId(ctx, tagId)
	return err
}

// PutTagsTagId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTagsTagId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTagsTagId(ctx, tagId)
	return err
}

// GetTagsTagIdStamps converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagsTagIdStamps(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagId" -------------
	var tagId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagId", ctx.Param("tagId"), &tagId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagId: %s", err))
	}

	ctx.Set(TraQOAuth2Scopes, []string{"read", "write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTagsTagIdStampsParams
	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagsTagIdStamps(ctx, tagId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/callBack", wrapper.GetCallBack)
	router.GET(baseURL+"/login", wrapper.GetLogin)
	router.GET(baseURL+"/me", wrapper.GetMe)
	router.GET(baseURL+"/stamps", wrapper.GetStamps)
	router.GET(baseURL+"/stamps/ranking", wrapper.GetStampsRanking)
	router.GET(baseURL+"/stamps/search", wrapper.GetStampsSearch)
	router.GET(baseURL+"/stamps/:stampId", wrapper.GetStampsStampId)
	router.DELETE(baseURL+"/stamps/:stampId/descriptions", wrapper.DeleteStampsStampIdDescriptions)
	router.GET(baseURL+"/stamps/:stampId/descriptions", wrapper.GetStampsStampIdDescriptions)
	router.POST(baseURL+"/stamps/:stampId/descriptions", wrapper.PostStampsStampIdDescriptions)
	router.PUT(baseURL+"/stamps/:stampId/descriptions", wrapper.PutStampsStampIdDescriptions)
	router.POST(baseURL+"/stamps/:stampId/tags", wrapper.PostStampsStampIdTags)
	router.DELETE(baseURL+"/stamps/:stampId/tags/:tagId", wrapper.DeleteStampsStampIdTagsTagId)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.DELETE(baseURL+"/tags/:tagId", wrapper.DeleteTagsTagId)
	router.GET(baseURL+"/tags/:tagId", wrapper.GetTagsTagId)
	router.PUT(baseURL+"/tags/:tagId", wrapper.PutTagsTagId)
	router.GET(baseURL+"/tags/:tagId/stamps", wrapper.GetTagsTagIdStamps)

}
